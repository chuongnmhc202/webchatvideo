version: '3.8'

services:
  mysql-db:
    image: mysql:8.0
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: pass
      MYSQL_DATABASE: user
    ports:
      - "3306:3306"  # mapped to local port 3307
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - backend-network

  mongo-db:
    image: mongo:6.0
    container_name: mongo-container
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - backend-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper-container
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend-network

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka-container
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"    # for client (outside Docker)
      - "9092:9092"      # for internal (inside Docker, just in case)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend-network

  redis:
    image: redis:7
    container_name: redis-container
    ports:
      - "6379:6379"
    command: ["redis-server"]
    networks:
      - backend-network

volumes:
  mysql-data:
  mongo-data:

networks: 
  backend-network:
    driver: bridge
