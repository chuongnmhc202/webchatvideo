  version: '3.7'

  services:

    zookeeper:
      image: confluentinc/cp-zookeeper:7.6.0
      container_name: zookeeper
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
      ports:
        - "2181:2181"
      networks:
        - bookie

    kafka:
      image: confluentinc/cp-kafka:7.6.0
      container_name: kafka
      depends_on:
        - zookeeper
      ports:
        - "29092:29092"    # for client (outside Docker)
        - "9092:9092"      # for internal (inside Docker, just in case)
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      networks:
        - bookie

    mysql:
      image: mysql:8.0
      environment:
        MYSQL_ROOT_PASSWORD: pass
        MYSQL_DATABASE: user
      volumes:
        - ./docker/mysql:/var/lib/mysql
        - ./DB/init.sql:/docker-entrypoint-initdb.d/init.sql
      networks:
        - bookie
      ports:
        - "3306:3306"

    user-service:
      image: nguyentanthanh0709/user-service:latest
      build:
        context: ./Back-End/user-service
        dockerfile: Dockerfile
      environment:
        NODE_ENV: development
        DB_HOST: mysql
        DB_USERNAME: root
        DB_PASSWORD: pass
        DB_DATABASE: user
        CLIENT_ORIGIN: http://localhost:3000
        PORT: 8180
      depends_on:
        - mysql
      # command: npm run dev
      ports:
        - "8180:8180"
      networks:
        - bookie

    mongo:
      image: mongo:6.0
      container_name: mongo
      environment:
        MONGO_INITDB_DATABASE: ChatDB
      volumes:
        - mongo-data:/data/db
      networks:
        - bookie
      ports:
        - "27017:27017"

    chat-service:
      image: nguyentanthanh0709/chat-service:latest
      build:
        context: ./Back-End/chat-service
        dockerfile: Dockerfile
      environment:
        NODE_ENV: development
        MONGO_DB_URI: mongodb://mongo:27017/ChatDB
        PORT: 8181
        KAFKA_BROKERS: kafka:9092
        USER_SERVICE_BASE_URL: http://user-service:8180
        CLIENT_ORIGIN: http://localhost:3000
      depends_on:
        - mongo
      # command: npm run dev
      ports:
        - "8181:8181"
      networks:
        - bookie

    redis:
      image: redis:7
      container_name: redis
      ports:
        - "6379:6379"
      command: ["redis-server"]
      networks:
        - bookie

    socket-service:
      image: nguyentanthanh0709/socket-service:latest
      build:
        context: ./Back-End/socket-service
        dockerfile: Dockerfile
      environment:
        BROKER_1: kafka:9092
        GROUP_ID: socket-service-group
        CLIENT_ID: socket-service
        PORT: 8182
        USER_SERVICE_BASE_URL: http://user-service:8180
        CLIENT_ORIGIN: http://localhost:3000
        REDIS_URL: redis://redis:6379
      depends_on:
        - redis
      # command: npm run dev
      ports:
        - "8182:8182"
      networks:
        - bookie

    webchat:
      image: nguyentanthanh0709/webchat:latest
      build:
        context: ./SRC
        dockerfile: Dockerfile
      ports:
        - "3000:80"
      container_name: webchat
      restart: unless-stopped
      networks:
        - bookie

  volumes:
    mysql:
    mongo-data:

  networks: 
    bookie:
      driver: bridge

